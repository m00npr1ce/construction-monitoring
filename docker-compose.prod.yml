version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: construction-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-construction_monitoring}
      POSTGRES_USER: ${DB_USER:-construction_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-construction_user} -d ${DB_NAME:-construction_monitoring}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - construction-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: construction-backend-prod
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${DB_NAME:-construction_monitoring}
      - SPRING_DATASOURCE_USERNAME=${DB_USER:-construction_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL:-https://your-domain.com}
      - APP_UPLOAD_DIR=/app/uploads
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    volumes:
      - uploads_data:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - construction-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: construction-frontend-prod
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - construction-network

  nginx-proxy:
    image: nginx:alpine
    container_name: construction-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: always
    networks:
      - construction-network

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local

networks:
  construction-network:
    driver: bridge


